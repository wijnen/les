#!/usr/bin/python3

# Imports and config. {{{
import sys
import os
import re
import random
try:
	from crypt import crypt
except:
	print('Warning: crypt could not be imported; storing passwords in plain text', file = sys.stderr)
	crypt = lambda pw, salt: pw
import traceback
import time
import fhs
import websocketd
from markdown import markdown
fhs.option('data', 'data directory', default = '.')
fhs.option('port', 'user port', default = '8010')
fhs.option('proxy', 'proxy address', default = 'les')
fhs.option('admin-port', 'admin port', default = '8011')
fhs.option('admin-proxy', 'admin proxy address', default = 'les-admin')
fhs.option('beamer-port', 'beamer port', default = '8012')
fhs.option('beamer-proxy', 'beamer proxy address', default = 'les-beamer')
fhs.option('loglimit', 'highest log level to output', default = 1)
fhs.option('content', 'replacement string for FILE://', default = 'content')
fhs.option('lazysave', 'save only when user quits', argtype = bool)
fhs.option('secret', 'security override key', default = '')
fhs.option('logfile', 'send log to this file instead of stderr', default = '')
fhs.option('programs', 'location of program chapters', default = 'lessen')
fhs.option('store', 'file to store answers in', default = 'answers.txt')
config = fhs.init(help = 'let students answer questions while in class', contact = 'Bas Wijnen <wijnen@debian.org>', version = '0.1')
from debug import debug
import user
user.unsaved.append('index')
# }}}

''' Log priorities: {{{
		0: Critical (system code errors)
		1: Important (user code errors)
		2: Normal (communication notifications)
		3: Debug
}}} '''

variables = {}
def parse_text(text): # {{{
	def subst(obj):
		try:
			ret = eval(obj.group(1), variables)
			return str(ret)
		except:
			debug(1, 'error evaluating expression substitution {}'.format(obj.group(0)))
			traceback.print_exc()
			return '[fout]'
	debug(2, repr(text))
	return re.sub('\${(.*?)}', subst, text).replace('FILE://', config['content'] + '/')
# }}}

def user_has_pw(the_user):
	u = user.load(the_user, group)
	return u['password'] is not None

def set_group(idx): # {{{
	global group, all_users, have_pw, seen, responses, cookies
	assert 0 <= idx < len(groups)
	if group != groups[idx]:
		for (u, g) in tuple(user.users):
			if g == 'admin':
				continue
			debug(3, 'Closing connection for ' + user.users[(u, g)]['name'])
			try:
				user.users[(u, g)]['connection'].remote.closed.event()
			except:
				pass
			user.users[(u, g)]['connection'].remote.close()
	group = groups[idx]
	all_users = user.list_group(group)
	have_pw = [user_has_pw(u) for u in all_users]
	seen = [False for u in all_users]
	responses = []
	cookies = {u: ''.join(chr(random.randrange(ord('a'), ord('z') + 1)) for _ in range(32)) for u in all_users}
	run(current)
# }}}

all_admins = user.list_group('admin')
admin_cookies = {u: ''.join(chr(random.randrange(ord('a'), ord('z') + 1)) for _ in range(32)) for u in all_admins}

# Set state value for all user responses. {{{
def update_states():
	for i, u in enumerate(all_users):
		if (u, group) not in user.users:
			responses[i]['state'] = 'disconnected' if seen[i] else 'offline' if have_pw[i] else 'inactive'
		else:
			responses[i]['state'] = 'waiting' if responses[i]['answer'] is None else 'answered'
# }}}

# Read program from file. {{{
def read_program(num):
	global program, current_program
	current_program = num
	name = programs[current_program]
	program = []
	lineno = 0
	toplevel = re.compile(r'^([A-Za-z][a-z]*)\s*:\s*(.*?)\s*$')
	block = re.compile(r'^\s(.*?)\s*$')
	# Read blocks. {{{
	for ln in open(os.path.join(config['programs'], name + os.extsep + 'txt')):
		lineno += 1
		if ln.strip() == '':
			if len(program) > 0 and program[-1]['indent'] not in (-1, None):
				program[-1]['arg'].append('')
			continue
		r = toplevel.match(ln)
		if r:
			cmd = r.group(1)
			arg = r.group(2)
			if len(arg) > 0:
				arg = [arg]
				indent = -1
			else:
				arg = []
				indent = None
			program.append({'cmd': cmd.lower(), 'case': cmd != cmd.lower(), 'arg': arg, 'indent': indent, 'lineno': lineno, 'option': []})
		else:
			r = block.match(ln)
			if r:
				if len(program) == 0:
					debug(0, '%d: block before first toplevel command is not allowed' % lineno)
					continue
				if program[-1]['indent'] == -1:
					indent = None
				else:
					indent = program[-1]['indent']
				l = r.group(1)
				if indent is not None and l[:indent].strip() != '':
					debug(0, '%d: incorrect indentation' % lineno)
				if indent is None:
					indent = len(l) - len(l.lstrip())
					program[-1]['indent'] = indent
				program[-1]['arg'].append(l[indent:].rstrip())
			else:
				debug(0, '%d: invalid line: ' % lineno + ln)
				continue
	# }}}
	# Combine blocks. {{{
	current = 0
	mc = ('choice', 'choices')
	toplevel = ('python', 'term', 'terms', 'word', 'words', 'title') + mc
	args = ('score', 'filter', 'option')
	while current < len(program):
		p = program[current]
		if p['cmd'] not in toplevel:
			if p['cmd'] not in args:
				debug(0, '%d: ignoring invalid command ' % p['lineno'] + p['cmd'])
				continue
			if current == 0:
				debug(0, '%d: ignoring invalid initial command ' % p['lineno'] + p['cmd'])
				continue
			if p['cmd'] == 'option':
				program[current - 1]['option'].append(' '.join(p['arg']))
			else:
				program[current - 1][p['cmd']] = p['arg']
			program.pop(current)
			continue
		if p['cmd'] in mc:
			p['case'] = True
		p['arg'] = parse_text('\n'.join(p['arg']))
		if p['cmd'] != 'python':
			p['markdown'] = p['arg']
			p['arg'] = markdown(p['arg'])
		current += 1
	# }}}
	# Set up scores and filters. {{{
	for p in program:
		# Put this in a function to create a new scope for expr.
		run_eval = lambda expr: lambda r: eval(expr, variables, {'response': r})
		if 'filter' in p:
			p['filter'] = run_eval(p['filter'])
		else:
			p['filter'] = lambda r: r
		if 'score' in p:
			p['score'] = run_eval(p['score'])
		else:
			p['score'] = lambda r: 0
	# }}}
# }}}
def run(index): # {{{
	global current, responses
	current = index
	if isinstance(current, int):
		while current < len(program):
			p = program[current]
			if p['cmd'] != 'python':
				break
			current += 1
			exec(p['arg'], variables)
	responses = []
	for i, u in enumerate(all_users):
		responses.append({'name': u, 'blocked': False, 'answer': None})	# 'state' is filled below.
		if (u, group) in user.users:
			user.users[(u, group)]['connection']._send_state()
	update_states()
	for a in user.admins:
		user.admins[a].remote.current.event(current)
		user.admins[a]._update_responses()
	beamerserver.broadcast.refresh(refresh_beamer())
# }}}
current = 0
programs = [os.path.splitext(x)[0] for x in os.listdir(config['programs']) if os.path.splitext(x)[1] == os.extsep + 'txt']
programs.sort()
current_program = None
if len(programs) > 0:
	read_program(len(programs) - 1)

def update_responses(): # {{{
	update_states()
	for a in user.admins:
		user.admins[a]._update_responses()
	beamerserver.broadcast.refresh(refresh_beamer())
# }}}

freeze = None
def refresh_beamer(): # {{{
	p = program[current] if current < len(program) else {'arg': '-', 'option': []}
	p = {k: v for k, v in p.items() if k in ('cmd', 'arg', 'option')}
	if not show_answers or not current < len(program):
		return p, False, sum(r['answer'] is not None for r in responses), len(user.users) - len(user.admins), {}, []
	if freeze is not None:
		return p, True, freeze[0], freeze[1]
	answers = {}
	opts = []
	for i, u in enumerate(all_users):
		a = responses[i]
		if a['blocked']:
			continue
		if a['answer'] is not None:
			if program[current]['cmd'] not in ('choices', 'words', 'terms'):
				a = [a['answer']]
			else:
				a = a['answer']
			for opt in a:
				if opt not in answers:
					answers[opt] = 0
					opts.append(opt)
				answers[opt] += 1
	opts.sort(key = lambda a: answers[a])
	return p, True, answers, opts[::-1]
# }}}

class Beamer_Connection: # {{{
	def __init__(self, remote): # {{{
		self.remote = remote
		self.remote.refresh.event(refresh_beamer())
	# }}}
# }}}

show_answers = False
class Admin_Connection: # {{{
	def __init__(self, remote): # {{{
		self.remote = remote
		remote.closed = self._closed
		self.user = None
		if 'cookie' in self.remote.data['headers']:
			c = self.remote.data['headers']['cookie']
			kv = [chunk.strip().split('=', 1) for chunk in c.split(';')]
			kv = {x[0]: x[1] for x in kv}
			if 'name' in kv and 'key' in kv and kv['name'] in all_admins and admin_cookies[kv['name']] == kv['key']:
				# Session key is correct; log the user in.
				if self._login(kv['name']):
					return
		q = remote.data['query']
		keys = ('name', 'secret')
		if config['secret'] != '' and all(x in q for x in keys) and q['secret'][0] == config['secret']:
			if self._login(q['name'][0]):
				return
		self.remote.login.event()
	# }}}
	def login(self, name, password): # {{{
		debug(2, 'admin login attempt')
		u = user.load(name.strip(), 'admin')
		if u is None:
			debug(2, 'Invalid admin {} from {}:{}'.format(name, *self.remote.socket.remote))
			return 'Invalid admin name'
		crypted = crypt(password, salt = u['password'])
		if crypted != u['password']:
			debug(2, 'Invalid password for {} from {}:{}'.format(name, *self.remote.socket.remote))
			return 'Invalid password'
		if not self._login(name.strip()):
			self.remote.login.event()
		return None
	# }}}
	def _login(self, name): # {{{
		new_user = user.load(name, 'admin')
		if new_user is None:
			return False
		if new_user['connection'] is not None:
			debug(3, 'Replacing connection for ' + name)
			try:
				new_user['connection'].remote.replaced.event()
				new_user['connection'].remote.close()
			except:
				pass
		else:
			user.users[(name.lower(), 'admin')] = new_user
		new_user['connection'] = self
		self.user = new_user
		debug(2, 'Admin {} logged in from {}:{}'.format(name, *self.remote.socket.remote))
		user.admins[name.lower()] = self
		self.remote.cookie.event(self.user['filename'], admin_cookies[self.user['filename']])
		self.remote.program.event(programs, current_program, [{k: v for k, v in p.items() if k not in ('filter', 'score')} for p in program])
		self.remote.current.event(current)
		self._update_responses()
		return True
	# }}}
	def _closed(self): # {{{
		self.remote.close()
		if self.user is None:
			debug(2, 'admin connection to {}:{} lost before logging in'.format(*self.remote.socket.remote))
			return
		debug(2, 'disconnecting admin {}'.format(self.user['name']))
		try:
			user.users.pop((self.user['filename'], 'admin'))
		except:
			pass
		try:
			user.admins.pop(self.user['filename'])
		except:
			pass
	# }}}
	#'
	def _update_responses(self): # {{{
		assert self.user is not None
		self.remote.responses.event(groups, group, responses)
	# }}}
	def run(self, index): # {{{
		assert self.user is not None
		run(index)
	# }}}
	def store_answers(self): # {{{
		assert self.user is not None
		with open(config['store'], 'a') as f:
			f.write(str(program[current]) + '\n')
			for r in responses:
				f.write('{}\t{}\n'.format(r['name'], repr(r['answer'])))
			f.write('\n')
	# }}}
	def refresh(self): # {{{
		assert self.user is not None
		self._update_responses()
	# }}}
	def block(self, user, value): # {{{
		assert self.user is not None
		responses[user]['blocked'] = value
		update_responses()
	# }}}
	def show_answers(self, show = True): # {{{
		assert self.user is not None
		global show_answers
		if show_answers is show:
			return
		show_answers = show
		self.freeze(show)
		adminserver.broadcast.show(show)
	# }}}
	def freeze(self, frozen = True): # {{{
		assert self.user is not None
		global freeze
		if (freeze is not None) == frozen:
			return
		freeze = None
		if frozen:
			freeze = refresh_beamer()[-2:]
		beamerserver.broadcast.refresh(refresh_beamer())
		adminserver.broadcast.freeze(frozen)
	# }}}
	def chapter(self, idx): # {{{
		assert 0 <= idx < len(programs)
		read_program(idx)
		if len(program) > 0:
			run(0)
		adminserver.broadcast.program(programs, current_program, [{k: v for k, v in p.items() if k not in ('filter', 'score')} for p in program])
		adminserver.broadcast.current(current)
	# }}}
	def group(self, idx): # {{{
		current = 0
		set_group(idx)
	# }}}
	def reset_password(self, idx): # {{{
		assert self.user is not None
		u = user.load(all_users[idx], group)
		if u is None:
			debug(2, 'Invalid user {}:{} on {}:{}'.format(all_users[idx], group, *self.remote.socket.remote))
			return 'deze naam is onbekend'
		u['password'] = None
		have_pw[idx] = False
		update_states()
		user.refresh_admins()
		user.save(u)
	# }}}
	def new_group(self, name): # {{{
		global groups
		assert name not in groups
		user.new_group(name.lower())
		groups = user.list_groups()
		update_responses()
	# }}}
	def new_student(self, name): # {{{
		assert name not in all_users
		user.new_user(group, name)
		set_group(groups.index(group))
		update_responses()
	# }}}
	def new_question(self): # {{{
		program.append({'cmd': 'term', 'case': True, 'arg': '', 'indent': None, 'lineno': -1, 'option': [], 'markdown': '', 'title': '', 'filter': lambda r: r, 'score': lambda r: 0})
		adminserver.broadcast.program(programs, current_program, [{k: v for k, v in p.items() if k not in ('filter', 'score')} for p in program])
		update_responses()
	# }}}
	def q_move_up(self, idx): # {{{
		assert 0 < idx < len(program)
		program.insert(idx - 1, program.pop(idx))
		adminserver.broadcast.program(programs, current_program, [{k: v for k, v in p.items() if k not in ('filter', 'score')} for p in program])
		update_responses()
	# }}}
	def q_move_down(self, idx): # {{{
		assert 0 <= idx < len(program) - 1
		program.insert(idx + 1, program.pop(idx))
		adminserver.broadcast.program(programs, current_program, [{k: v for k, v in p.items() if k not in ('filter', 'score')} for p in program])
		update_responses()
	# }}}
	def q_remove(self, idx): # {{{
		assert 0 <= idx < len(program)
		program.pop(idx)
		adminserver.broadcast.program(programs, current_program, [{k: v for k, v in p.items() if k not in ('filter', 'score')} for p in program])
		update_responses()
	# }}}
	def q_edit(self, idx, type, case, md, options): # {{{
		program[idx] = {'cmd': type.lower(), 'case': case, 'arg': markdown(md), 'indent': None, 'lineno': -1, 'option': options, 'markdown': md, 'title': '\n'.join(options), 'filter': lambda r: r, 'score': lambda r: 0}
		self.save_chapter()
		adminserver.broadcast.program(programs, current_program, [{k: v for k, v in p.items() if k not in ('filter', 'score')} for p in program])
		update_responses()
	# }}}
	def copy_chapter(self, src, dst): # {{{
		sname = os.path.join(config['programs'], src + os.extsep + 'txt')
		dname = os.path.join(config['programs'], dst + os.extsep + 'txt')
		assert sname in programs
		assert dname not in programs
		programs.append(dst)
		current = programs[current_program]
		programs.sort()
		current = programs.index(current)
		shutil.copy(sname, dname)
	# }}}
	def save_chapter(self): # {{{
		filename = os.path.join(config['programs'], programs[current_program] + os.extsep + 'txt')
		def parse(md):
			lines = md.split('\n')
			if len(lines) < 2:
				return md
			return ''.join('\n\t' + line for line in lines)
		with open(filename, 'w') as f:
			for p in program:
				cmd = p['cmd']
				if p['case']:
					cmd = cmd.capitalize()
				arg = parse(p['markdown'])
				print(cmd + ':' + arg, file = f)
				for o in p['option']:
					print('option:' + parse(o), file = f)
				# TODO: save filter and score
	# }}}
# }}}

class Connection: # {{{
	def __init__(self, remote): # {{{
		debug(2, 'New connection from {}:{}'.format(*remote.socket.remote))
		self.remote = remote
		remote.closed = self._closed
		self.remote.group.event(group)
		self.response = None
		if 'cookie' in self.remote.data['headers']:
			c = self.remote.data['headers']['cookie']
			kv = [chunk.strip().split('=', 1) for chunk in c.split(';')]
			kv = {x[0]: x[1] for x in kv}
			if 'name' in kv and 'key' in kv and kv['name'] in all_users and cookies[kv['name']] == kv['key']:
				# Session key is correct; log the user in.
				if self._login(kv['name'], group):
					return
		q = remote.data['query']
		keys = ('name', 'group', 'secret')
		if config['secret'] != '' and all(x in q for x in keys) and q['secret'][0] == config['secret'] and keys['group'] == group:
			if self._login(q['name'][0], q['group'][0]):
				return
		self.remote.login.event()
	# }}}
	#'
	def login(self, name, password): # {{{
		debug(2, 'user login attempt {}/{}'.format(name, password))
		u = user.load(name.strip(), group)
		if u is None:
			debug(2, 'Invalid user {}:{} on {}:{}'.format(name, group, *self.remote.socket.remote))
			return 'deze naam is onbekend'
		crypted = crypt(password, salt = u['password'])
		if u['password'] is not None and crypted != u['password']:
			debug(2, 'Invalid password for {}:{} on {}:{}'.format(name, group, *self.remote.socket.remote))
			return 'dit wachtwoord is onjuist'
		u = self._login(name.strip(), group.strip())
		# In case the password is new, it needs to be stored.
		if not have_pw[u['index']]:
			u['password'] = crypted
			have_pw[u['index']] = True
			user.refresh_admins()
			user.save(u)
		return None
	# }}}
	def _login(self, name, group): # {{{
		u = user.load(name, group)
		if u is None:
			debug(2, 'failed login for {}:{}'.format(name, group))
			return None
		if u['connection'] is not None:
			debug(2, 'Replacing connection for ' + name)
			try:
				u['connection'].remote.replaced.event()
				u['connection'].remote.close()
			except:
				pass
		else:
			u['index'] = all_users.index(name.lower())
			seen[u['index']] = True
			user.users[(name.lower(), group.lower())] = u
		u['connection'] = self
		self.user = u
		debug(2, 'User {}:{} logged in from {}:{}'.format(name, group, *self.remote.socket.remote))
		self.remote.cookie.event(self.user['filename'], cookies[self.user['filename']])
		self._send_state()
		update_states()
		user.refresh_admins()
		beamerserver.broadcast.refresh(refresh_beamer())
		return u
	# }}}
	def _closed(self): # {{{
		self.remote.close()
		if not hasattr(self, 'user'):
			debug(2, 'connection to {}:{} lost before logging in'.format(*self.remote.socket.remote))
			return
		debug(2, 'disconnecting {}:{}'.format(self.user['name'], self.user['group']))
		user.save(self.user)
		try:
			user.users.pop((self.user['filename'], group.lower()))
		except:
			pass
		update_states()
		user.refresh_admins()
		beamerserver.broadcast.refresh(refresh_beamer())
	# }}}
	def _send_state(self): # {{{
		if not hasattr(self, 'user'):
			return
		self.remote.content.event(current, {k: v for k, v in program[current].items() if k not in ('filter', 'score')} if current < len(program) else None, responses[self.user['index']]['answer'])
	# }}}
	def respond(self, serial, response): # {{{
		if not hasattr(self, 'user'):
			return
		if serial != current:
			debug(1, 'response for wrong question received from ' + self.user['name'])
		else:
			if program[current]['cmd'] == 'word':
				response = (response.split() + [''])[0]
			elif program[current]['cmd'] == 'words':
				response = list(set(x.strip() for x in response if x.strip() != ''))
				response.sort()
				response = tuple(response)
			if not program[current]['case']:
				if program[current]['cmd'] in ('words', 'terms'):
					response = [x.lower() for x in response]
				else:
					response = response.lower()
			responses[self.user['index']]['answer'] = program[current]['filter'](response)
			update_responses()
		self._send_state()
	# }}}
# }}}

# Main program {{{
server = websocketd.RPChttpd(config['port'], Connection, httpdirs = [os.path.join('html', 'main')], tls = False, proxy = config['proxy'])
adminserver = websocketd.RPChttpd(config['admin-port'], Admin_Connection, httpdirs = [os.path.join('html', 'admin')], tls = False, proxy = config['admin-proxy'])
# The beamer is the same in terms of handling, but it uses different html.
beamerserver = websocketd.RPChttpd(config['beamer-port'], Beamer_Connection, httpdirs = [os.path.join('html', 'beamer')], tls = False, proxy = config['beamer-proxy'])
groups = user.list_groups()
group = None
set_group(0)
print('servers are running. main: %s, admin: %s, beamer: %s' % (config['port'], config['admin-port'], config['beamer-port']))
while True:
	try:
		websocketd.fgloop()
	except KeyboardInterrupt:
		break
	except:
		traceback.print_exc()
# }}}

# vim: set foldmethod=marker :
